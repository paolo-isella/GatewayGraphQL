schema {
  query: Query
}

type Product {
  id: Int!
  reviews: [Review!]!
}

type Query {
  reviews(where: ReviewFilterInput @cost(weight: "10") order: [ReviewSortInput!] @cost(weight: "10")): [Review!]! @cost(weight: "10")
  userById(id: Int!): User
  usersById(ids: [Int!]! where: UserFilterInput @cost(weight: "10") order: [UserSortInput!] @cost(weight: "10")): [User!] @cost(weight: "10")
}

type Review {
  id: Int!
  body: String
  stars: Int!
  productId: Int!
  product: Product!
  user: User! @cost(weight: "10")
}

type User {
  id: Int!
  name: String
  reviewsAsync(where: ReviewFilterInput @cost(weight: "10") order: [ReviewSortInput!] @cost(weight: "10")): [Review!]! @cost(weight: "10")
}

input IntOperationFilterInput {
  eq: Int @cost(weight: "10")
  neq: Int @cost(weight: "10")
  in: [Int] @cost(weight: "10")
  nin: [Int] @cost(weight: "10")
  gt: Int @cost(weight: "10")
  ngt: Int @cost(weight: "10")
  gte: Int @cost(weight: "10")
  ngte: Int @cost(weight: "10")
  lt: Int @cost(weight: "10")
  nlt: Int @cost(weight: "10")
  lte: Int @cost(weight: "10")
  nlte: Int @cost(weight: "10")
}

input ListFilterInputTypeOfReviewFilterInput {
  all: ReviewFilterInput @cost(weight: "10")
  none: ReviewFilterInput @cost(weight: "10")
  some: ReviewFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ProductFilterInput {
  and: [ProductFilterInput!]
  or: [ProductFilterInput!]
  id: IntOperationFilterInput
  reviews: ListFilterInputTypeOfReviewFilterInput
}

input ProductSortInput {
  id: SortEnumType @cost(weight: "10")
}

input ReviewFilterInput {
  and: [ReviewFilterInput!]
  or: [ReviewFilterInput!]
  id: IntOperationFilterInput
  body: StringOperationFilterInput
  stars: IntOperationFilterInput
  productId: IntOperationFilterInput
  product: ProductFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
}

input ReviewSortInput {
  id: SortEnumType @cost(weight: "10")
  body: SortEnumType @cost(weight: "10")
  stars: SortEnumType @cost(weight: "10")
  productId: SortEnumType @cost(weight: "10")
  product: ProductSortInput @cost(weight: "10")
  userId: SortEnumType @cost(weight: "10")
  user: UserSortInput @cost(weight: "10")
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String @cost(weight: "10")
  neq: String @cost(weight: "10")
  contains: String @cost(weight: "20")
  ncontains: String @cost(weight: "20")
  in: [String] @cost(weight: "10")
  nin: [String] @cost(weight: "10")
  startsWith: String @cost(weight: "20")
  nstartsWith: String @cost(weight: "20")
  endsWith: String @cost(weight: "20")
  nendsWith: String @cost(weight: "20")
}

input UserFilterInput {
  and: [UserFilterInput!]
  or: [UserFilterInput!]
  id: IntOperationFilterInput
  name: StringOperationFilterInput
}

input UserSortInput {
  id: SortEnumType @cost(weight: "10")
  name: SortEnumType @cost(weight: "10")
}

enum SortEnumType {
  ASC
  DESC
}

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION